name: "Build and Deploy"

# on: push
on:
  push:
    # branches:
    #   - main
  workflow_dispatch:

env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}

jobs:
  build_server:
    name: "Build Server"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Script files in the scripts directory.
        working-directory: ./server/
    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v4
      - name: pwd
        run: pwd
      - name: ls before
        run: ls
      - name: package
        run: . scripts/package.sh
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: built_server
          retention-days: 1
          path: |
            add_task_lambda_function.zip
            post_confirmation_lambda_function.zip
            dist
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
      - name: ls after
        run: ls

  build_client:
    name: "Build Client"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Script files in the scripts directory.
        working-directory: ./client/
    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v4
      - name: pwd
        run: pwd
      - name: ls before
        run: ls
      - name: package
        run: . scripts/package.sh
      - name: ls after
        run: |
          echo root-dir
          ls .
          echo src-dir
          ls ./src
          echo scripts-dir
          ls ./scripts
          echo build-dir
          ls ./build
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: built_client
          retention-days: 1
          path: |
            client/client.zip
            client/build/
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

  terraform:
    needs: [build_server, build_client]
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v4

      - name: Download Functions
        uses: actions/download-artifact@v4

      - name: pwd
        run: pwd

      - name: ls
        run: |
          echo server-dir
          ls ../built_server
          echo 
          echo client-dir
          ls ../built_client

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform format
        id: fmt
        run: terraform fmt -check -diff

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        # if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  upload_client:
    needs: [terraform, build_client]
    name: "Upload Client"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:
      - name: Download Functions
        uses: actions/download-artifact@v4

      - name: S3 upload
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_bucket: "us-west-2-new-gql-client"
          source_dir: "built_client/build/"
          destination_dir: ""
